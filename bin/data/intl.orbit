------ Orbit ------

------ Texto como interfaz ------

¿Por qué una interfaz de texto y no algún otro método de entrada o interfaz de usuario? 

Consideramos el teclado como un método eficaz y que cualquier computadora tiene para enviar instrucciones.

Nos adscribimos al enunciado de [[Toplap]]: ¡Muéstrenos sus pantallas!

Cuando las instrucciones se vuelven complejas y diversas, tener un GUI para cada cosa puede volverse un caos. 

Orbit utiliza [[ofxGLEditor]], un editor que compila y controla al mismo OpenFrameworks.

Cuenta con las características de cualquier editor básico. Puedes escribir borrar, moverte a lo largo del documento.

Notarás que el texto cambia de color dependiendo de algunos signos 1 2 3

// Sirve para comentar una linea. El coloreado es verde y la computadora ignora este texto. 

/*

De esta manera podemos comentar varias líneas al mismo tiempo.
Esto es de utilidad para comentar bloques de código. 

*/

ofxGLEditor cuenta con varias ventanas. Ctrl + 0 - 9 para desplazarte entre ellas.

Recomendamos utilizar las ventanas vacías para escribir en ellas, así no perderás esta guía.  

Actualmente, la manera más fácil de utilizar Orbit es en el [[Repl]] (ctrl + r).

Sin embargo, es posible [[declarar]] enunciados desde los editores de texto. 


------ Videos ------


Optimización vs. estándar. En Orbit es posible utilizar videos codificados en [[h.264]] y en [[Hap]].

También es posible utilizar otras cosas que revisaremos más adelante. 

En ambos casos, el contendor debe ser .mov

Una guía para transcodificar a Hap se puede encontrar en el [[README.md]] de este repositorio.

Es importante señalar que el archivo debe ser invocado con extensión. 

El primer ejemplo que correremos es el siguiente:



1 video draw samplehap.mov



Para declarar esta línea debes situarte en el renglón de la línea y pulsar shift + e

La línea para limpiar el video es:



1 video close samplehap.mov



Entonces, la sintaxis de Orbit sigue una lógica parecida a:

pista + objeto + acción + parámetros y archivos

Las siguientes líneas describen el resto de parámetros para los videos

Orbit trata de seguir más o menos la misma sintaxis que los objetos existentes en OF. 



1 video setSpeed 2

1 video setOpacity 100

1 video setPosition 200 200 200

1 video setScale 2

1 video rotate 35 25 67

2 video draw samplehap.mov // para agregar más videos



Para el caso de la posición hay [[coordenadas en x y z]]

La orientación en Orbit es central, a diferencia de lo que nativamente puede hacer OF y P.

El origen está en el centro para facilitar algunas funciones de la cámara

------ Cámara -------

Una de las cosas que puede distinguir a Orbit de otros entornos es la cámara.

[[ofEasyCam]] está más o menos basada en PeasyCam de Processing.

Una de las funcionalidades más interesantes y que dan nombre a este entorno es:



cam orbit 124 24



La cámara orbitará en torno a un punto definido (en este caso, el punto que se encuentra en las coordenadas 0, 0, 0.



cam setPosition 10 10 10

cam lookAt 100 0 0

cam setDistance 1000



Es posible que la cámara enfoque objetos específicos del espacio pero nos hace falta investigar sobre ello. 

Algunos parámetros de la cámara se pueden controlar también con el mouse. 

------ Entorno -------

Orbit aprovecha las posibilidades de la iluminación en OF.

Cuenta con una [[luz]] por default que tiene la misma posición de la cámara.

Esta luz es blanca puede cambiar de color.



mainLight color 100 255 255



Por otro lado, es posible asignar un [[material]] general a los objetos del entorno.

El brillo de los materiales puede cambiar con:



material setShininess 12



Los videos cargados con hvideo y video, así como el editor, no reflejan luz.

Más adelante aclararemos este punto.

Hasta 4 luces pueden ser activadas en el entorno. Sus colores pueden personalizarse.

Algunos aspectos del movimiento de las luces también pueden cambiar. 

Con la indicación draw dibujamos la posición de la luz seleccionada



1 light enable

mainLight disable // para deshabilitar la luz principal 

1 light color 255 25 255

1 light draw

1 light oscSpeed 2 4 8

1 light oscAmp 1000 500 200

1 light clear



------ Primitivos ------



Es posible dibujar [[objetos primitivos nativos]] de OpenFrameworks. 

Son afectados por las condiciones del entorno: luz y material.

Los objetos que se pueden invocar son: box, sphere, cone, cylinder, ico y plane.



draw box

clear box

// hace falta un scale y un setPosition



------ Modelos ------

Para cargar modelos, Orbit utiliza [[ofxAssimpModelLoader]].

Esta extensión es nativa de OF y permite cargar un gran número de [[formatos]] para objetos 3d.



1 model load stone.obj

1 model setPosition 100 45 23

1 model rotate 180 90 45

1 model scale 2

1 model clear 1 



------ Otros efectos ------	

Es posible activar [[retroalimentación]] y manipular su posición.



feedback enable

feedback setPosition 100 200



Hay un conjunto de efectos que pueden implementarse en Orbit.

Son parte de una librería que se llaman [[ofxPostGlitch]]



glitch convergence true

glitch glow true

glitch convergence false



La lista completa: convergence, glow, shaker, cutslider, twist, outline, noise, slitscan, swell, invert.



Esta extensión también tiene remapeo de colores: 



colorRemap highContrast true

colorRemap blueRaise true

colorRemap highContrast false



Los botones de pánico que desactivan todos los efectos son;



glitch all false

colorRemap all false



Anécdota: Un día tocamos en un lugar y nos encontramos con un grupo que utilizaba los mismos shaders que Orbit.

A futuro: Escribir shaders propios. 



------ Shaders -------

Los shaders son una forma especial de manipular la imagen a través de la [[tarjeta de video]]

Es posible que los shaders tengan funcionamiento por [[sí mismos]].

También pueden afectar una imagen existente.

OF puede invocar shaders y manipularlos con variables que se manipulan en el ciclo de dibujo o actualización.

La extensión ofxGLEditor tiene un coloreado específico para la sintaxis de los shaders.

Los shaders tienen su propio lenguaje: [[GLSL]]

No nos metemos mucho en shaders: [[Hydra]] es un proyecto que los manipula eficientemente. 



shader enable

shader disable



Para manipular dinámicamente el shader:

ctrl + el número de un editor vacío

ctrl + o y de ahí navegar hasta la carpeta shader

abrir noise.vert

Hay que tener especial cuidado a la hora de manipular shaders: todo puede estropearse.

Nota: podemos reescribir el shader noise.vert y noise.frag 

------ Envío de mensajes OSC ------

OpenSoundControl es un protocolo de comunicación entre dispositivos.

Funciona en el contexto de redes. 

Es posible enviar mensajes [[OSC]] desde Orbit.

La sintaxis es la siguiente: 

oscSender + dirección + puerto + tag + mensaje // los tags van antecedidos de /



oscSender 127.0.0.1 57120 /hola "hola_mundo"



Enviamos un mensajes OSC de manera [[local]] (la misma computadora donde esta corriendo Orbit) en el puerto que lee SuperCollider, con el tag /hola y el mensaje "hola_mundo. Podemos encontrar el código de SC que complementa este ejemplo en la carpeta sc. 



Es posible enviar hasta 3 mensajes:

oscSender + dirección + puerto + tag + mensaje1 + mensaje2 + mensaje3

------ Recepción de mensajes OSC -------



------ Secuencias hacia y desde SC ------

------ Videos como texturas ------

------ Modo domo ------

------ Arreglos de primitivos ------

------ Arreglos de primitivos con imagénes y videos como Texturas ------

